#%RAML 0.8
baseUri: http://mocksvc.mulesoft.com/mocks/d9dc7d25-c3e8-421d-bfd9-a3f66d23a150
#baseUri: https://www.testdomain.com/resource-apis
title: AIRS Resource API
version: 0.1.0
protocols:
  -  HTTPS
mediaType: application/json
securedBy: [OAuth 2.0]
securitySchemes:
  - OAuth 2.0:
      type: OAuth 2.0
      describedBy:
            queryParameters:
                access_token:
                    description: |
                       Used to send a valid OAuth 2 access token. Do not use together with 
                       the "Authorization" header
                    type: string                    
      settings:
        authorizationUri: http://localhost:8085/authorize
        accessTokenUri: http://localhost:8085/access-token
        authorizationGrants: [token]
resourceTypes:
  -  collection:
      description: "Operations performed on the set of all AIRS <<resourcePathName>> within the system, and for adding new <<resourcePathName>> to the set of <<resourcePathName>> "
      get:
        description: Searches for <<resourcePathName>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  
        queryParameters:
          #PAGINATION
          page:
            description: Specify the page that you want to retrieve
            type: integer
            required: true
            example: 1
          per_page:
            description: Specify the amount of items that will be retrieved per page
            type: integer
            minimum: 10
            maximum: 100
            default: 25
            example: 25
          keyword:
            description: "text search on indexed fields"
            required: false
            type: string
            example: "food,homeless,medical"
          createdBefore:
            description: "Record created or updated range - before"
            required: false
            type: date
            example: 08-22-2012
          createdAfter:
            description: "Record created or updated range - after"
            required: false
            type: date
            example: 08-22-2013
        responses:
          200: 
            description: Success.
            body: 
              application/json: 
                example: | 
                 { 
                  "id": 10 
                  }, 
                  { 
                  "id": 11
                   }, 
                   { 
                   "id": 12 
                   }
          400: 
            description: Bad Request - The request was invalid or cannot be served.
            body:
              application/json:
                example: | 
                  {
                  result: {
                  code: 400,
                  info: "Bad Request" 
                    }
                   } 
          403: 
            description: Forbidden - The server understood the request, but is refusing it or the access is not allowed.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 403,
                  info: "Access Denied" 
                   }
                  }
          404: 
            description: Not found - There is no resource behind the URI.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 404,
                   info: "Resource Not Found" 
                  }            
          500:
            description: 500 - Internal Server Error
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 500,
                   info: "Internal Server Error - retry request" 
                  }
      post:
        description: |
          Add <<resourcePathName>>
        body:
          application/json:
            schema: <<schema_json>>
            example: <<example_json>>
        responses:
          201:
            description: OK - New resource has been created.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 201,
                  info: "Success" 
                   }
                 }
          400:
            description: Bad Request - The request was invalid or cannot be served.
            body:
              application/json:
                example: | 
                  {
                  result: {
                  code: 400,
                  info: "Bad Request" 
                   }
                  }
          401:
            description: Unauthorized - The request requires user authentication.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 401,
                  info: "Invalid token" 
                   }
                  }
          403:
            description: Forbidden - The server understood the request, but is refusing it or access is not allowed.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 403,
                  info: "Access Denied" 
                   }
                 }
          404: 
            description: Not found - There is no resource behind the URI.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 404,
                   info: "Resource Not Found" 
                  }
          422:
            description: Unprocessable Entity - Request body is incorrect.
          500:
            description: 500 - Internal Server Error.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 500,
                   info: "Internal Server Error - retry request" 
                  }
  -  member:
      get:
        description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
        responses:
          200:
            description: Success.
            body:
              application/json:
                schema: <<schema_json>>
          400:
            description: Bad Request - The request was invalid or cannot be served. 
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 400,
                  info: "Bad Request" 
                   }
                 }
          401:
            description: Unauthorized - The request requires an user authentication.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 401,
                  info: "Invalid Token" 
                    }
                 }
          403: 
            description: Forbidden - The server understood the request, but is refusing it or the access is not allowed.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 403,
                  info: "Access Denied" 
                  }
                 }
          404:
            description: Not found - There is no resource behind the URI.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 404,
                   info: "Resource Not Found" 
                  }
          500: 
            description: Internal Server Error
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 500,
                   info: "Internal Server Error - retry request" 
                  }
      put:
        description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        responses:
          200:
            description: Success.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 200,
                  info: "Success" 
                  }
                 }
          304:
            description: Not Modified - The client can use cached data.
          400:
            description: Bad Request - The request was invalid or cannot be served.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 400,
                  info: "Bad Request" 
                  }
                 }
          401:
            description: Unauthorized - The request requires a user.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 401,
                  info: "Unauthorized" 
                  }
                 }
          403:
            description: Forbidden - The server understood the request, but is refusing it or the access is not allowed.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 403,
                  info: "Forbidden" 
                  }
                 }
          404:
            description: Not found - There is no resource behind the URI.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 404,
                   info: "Resource Not Found" 
                  }
          500:
            description: Internal Server Error.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 500,
                   info: "Internal Server Error - retry request" 
                  }
      delete: 
        description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        responses: 
          204:
            description:  Success. The resource was successfully deleted.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 204,
                  info: "Success" 
                  }
                 }
          400:
            description: Bad Request - The request was invalid or cannot be served.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 400,
                  info: "Bad Request" 
                  }
                 }
          401: 
            description: Unauthorized - The request requires user authentication.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 401,
                  info: "Unauthorized" 
                  }
                 }
          403:
            description: Forbidden - The server understood the request, but is refusing it or the access is not allowed.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 403,
                  info: "Forbidden" 
                  }
                 }
          404:
            description: Not found - There is no resource behind the URI.
            body:
              application/json:
                example: | 
                 {
                  result: {
                  code: 404,
                  info: "Resource Not Found" 
                  }
                 }
          500:
            description: Internal Server Error.
            body:
              application/json:
                example: |
                 {
                   result: {
                   code: 500,
                   info: "Internal Server Error - retry request" 
                  }
            
schemas:
  - agencies: !include agencyschema.json   
  - services: !include serviceschema.json 
  - servicegroups: !include servicegroupschema.json 
  - sites: !include siteschema.json  
  - siteservices: !include siteserviceschema.json   
/authorize: 
  displayName: Authorization Endpoint
  description: |
    This endpoint is used by the client to obtain authorization from the AIRS user via user-agent (typically a web browser) redirection.
    It handles active session lookup (via cookie), authenticating the user, and user consent.
  get:
    description: |
        The authorization service validates the request to ensure all required parameters are present and valid. 
    queryParameters:
      response_type:
      client_id:
      redirect_uri:
      state:
      access_type:
      approval_prompt:
    responses:
      200:
        description: |
          If AIRS grants the access request, the authorization service issues an authorization code and delivers it to the client by adding the following parameters to the query component of the redirection URI using the "application/x-www-form-urlencoded" format.
        body:
          example : |
              Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz
      404 :
        description: |
          If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization service will inform the user of the error, and will not automatically redirect the user-agent to the invalid redirection URI.
          If AIRS denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization service informs the client by adding the following parameters to the query component of the redirection URI using the "application/x-www-form-urlencoded" format:
              <table class="confluenceTable tablesorter" border=1>
              
             <thead><tr class="sortableHeader"> 
                <th class="confluenceTh sortableHeader" data-column="0"><div class="tablesorter-header-inner"><p> Parameter Name </p></div></th> 
                <th class="confluenceTh sortableHeader" data-column="1"><div class="tablesorter-header-inner"><p> Description / Parameter Value </p></div></th> 
                <th class="confluenceTh sortableHeader" data-column="2"><div class="tablesorter-header-inner"><p> Required? </p></div></th> 
               </tr></thead><tbody> 
                
               <tr> 
                <td class="confluenceTd"><p> error </p></td> 
                <td class="confluenceTd"><p> A single error code from the following: <br class="atl-forced-newline"> <strong>invalid_request</strong> <br class="atl-forced-newline"> The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed. <br class="atl-forced-newline"> <strong>unauthorized_client</strong> <br class="atl-forced-newline"> The client is not authorized to request an authorization code using this method. <br class="atl-forced-newline"> <strong>access_denied</strong> <br class="atl-forced-newline"> The AIRS user or authorization service denied the request. <br class="atl-forced-newline"> <strong>unsupported_response_type</strong> <br class="atl-forced-newline"> The authorization service does not support obtaining an authorization code using this method. <br class="atl-forced-newline"> <strong>server_error</strong> <br class="atl-forced-newline"> The authorization service encountered an unexpected condition which prevented it from fulfilling the request. <br class="atl-forced-newline"> <strong>temporarily_unavailable</strong> <br class="atl-forced-newline"> The authorization service is currently unable to handle the request due to a temporary overloading or maintenance of the server. </p></td> 
                <td class="confluenceTd"><p> Yes </p></td> 
               </tr> 
               <tr> 
                <td class="confluenceTd"><p> error_description </p></td> 
                <td class="confluenceTd"><p> A human-readable UTF-8 encoded text providing additional information, used to assist the client developer in understanding the error that occurred. </p></td> 
                <td class="confluenceTd"><p> No </p></td> 
               </tr> 
               <tr> 
                <td class="confluenceTd"><p> state </p></td> 
                <td class="confluenceTd"><p> The exact value received from the client. </p></td> 
                <td class="confluenceTd"><p> Yes if a <strong>state</strong> parameter was included in the authorization request. </p></td> 
               </tr> 
              </tbody></table>                
/token:
  displayName: Token Endpoint
  description: |
    The token endpoint is used by the client to obtain an access token by presenting one of the following:
    1) authorization code (obtained thru Authorization Endpoint using the Authorization Code Grant Flow)
    2) refresh token
    The token endpoint is used with every authorization flow except for the implicit grant flow (since an access token is issued directly).
  post:
    description: |
      The client makes a request to the token endpoint by adding the following parameters using the "application/x-www-form-urlencoded" format in the HTTP request entity-body
      
       The authorization service does the following:
          Authenticate the client and ensure the authorization code was issued to the authenticated client.
          Verify that the authorization code is valid.
          Ensure that the specified redirect_uri parameter value is same as the redirect_uri parameter value included in the initial authorization request as described in Authorization Code Grant Flow - Authorization Request.
    body:
      example : |
    responses:
      200 :
        description: |
          If the access token request is valid and authorized, the authorization service issues an access token and optional refresh token, and constructs the response by adding the following parameters to the entity body of the HTTP response with a 200 (OK) status code
        body:
          example : |
              {
                "access_token":"2YotnFZFEjr1zCsicMWpAA",
                "token_type":"Bearer",
                "expires_in":3600,
                "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA"
              }
      400:
        description: |
          The authorization service responds with an HTTP 400 (Bad Request) status code and includes the following parameters with the response
            
             <table class="confluenceTable tablesorter">
              <thead><tr class="sortableHeader"> 
                <th class="confluenceTh sortableHeader" data-column="0"><div class="tablesorter-header-inner"><p> Parameter Name </p></div></th> 
                <th class="confluenceTh sortableHeader" data-column="1"><div class="tablesorter-header-inner"><p> Description / Parameter Value </p></div></th> 
                <th class="confluenceTh sortableHeader" data-column="2"><div class="tablesorter-header-inner"><p> Required? </p></div></th> 
               </tr></thead><tbody> 
                
               <tr> 
                <td class="confluenceTd"><p> error </p></td> 
                <td class="confluenceTd"><p> A single error code from the following: <br class="atl-forced-newline">     <strong>invalid_request</strong> <br class="atl-forced-newline"> The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. <br class="atl-forced-newline"> <strong>invalid_client</strong> <br class="atl-forced-newline"> Client authentication failed (e.g. unknown client, no client authentication included, or unsupported authentication method). <br class="atl-forced-newline"> <strong>invalid_grant</strong> <br class="atl-forced-newline"> The provided authorization grant (e.g. authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client. This error code is also returned if the account is disabled. <br class="atl-forced-newline"> <strong>unauthorized_client</strong> <br class="atl-forced-newline"> The authenticated client is not authorized to use this authorization grant type. <br class="atl-forced-newline"> <strong>unsupported_grant_type</strong> <br class="atl-forced-newline"> The authorization grant type is not supported by the authorization service. <br class="atl-forced-newline"> <strong>server_error</strong> <br class="atl-forced-newline"> The authorization service encountered an unexpected condition which prevented it from fulfilling the request. <br class="atl-forced-newline"> <strong>temporarily_unavailable</strong> <br class="atl-forced-newline"> The authorization service is currently unable to handle the request due to a temporary overloading or maintenance of the server. </p></td> 
                <td class="confluenceTd"><p> Yes </p></td> 
               </tr> 
               <tr> 
                <td class="confluenceTd"><p> error_description </p></td> 
                <td class="confluenceTd"><p> A human-readable UTF-8 encoded text providing additional information, used to assist the client developer in understanding the error that occurred. </p></td> 
                <td class="confluenceTd"><p> No </p></td> 
               </tr> 
              </tbody></table>                  
/revoke:
  displayName: Revocation Request
  description: |
      The revocation endpoint is used by the client to revoke one of the following tokens:
      1) access token
      2) refresh token - (i.e. refresh token and all related access tokens)
      3) consent token - (i.e. consent token and all related refresh tokens and access tokens)
      Developers may use this feature when configuring a Log Out button in their application.
  post:
    description: |
      The revocation endpoint is used by the client to revoke one of the following tokens:
      1) access token
      2) refresh token - (i.e. refresh token and all related access tokens)
      3) consent token - (i.e. consent token and all related refresh tokens and access tokens)
      Developers may use this feature when configuring a Log Out button in their application.
    body:
        example : |
          revoking an access token : 
              access_token=SplxlOBeZQQYbYS6WxSbIA
          revoking a refresh token) : 
             refresh_token=khgfkagasgurnjg434
          revoking a consent token
             consent_token=GLKfkfnafan349dljl
    responses:
      200:
        body:
         example : |
          revoking an access token : 
             { "access_token"="SplxlOBeZQQYbYS6WxSbIA" }
          revoking a refresh token) : 
             {"refresh_token"="khgfkagasgurnjg434" }
          revoking a consent token
             { "consent_token"="GLKfkfnafan349dljl" }
      400: 
          #description : |
          body:
            example : |
              { "error":"invalid_request" }
/agencies:
  type: {
    collection: { 
      schema_json: agencies,
      example_json: !include agencypostexample.json 
    }
  }
  displayName: Agencies
  
  /{agencyID}:
    type: {
    member: { 
        schema_json: agencies
      }
    }
   
/services:
  type: {
      collection: { 
        schema_json: services,
        example_json: !include servicepostexample.json 
      }
    }
  displayName: Services
  
  /{serviceID}:
    type: {
    member: { 
        schema_json: services
      }
    }
  
/servicegroups: 
  type: {
    collection: { 
      schema_json: servicegroups,
      example_json: !include servicegrouppostexample.json
    }
  }
  displayName: ServiceGroups
   
  /{servicegroupID}:
    type: {
    member: { 
        schema_json: servicegroups
      }
    }
 
/sites:
  type: {
    collection: { 
      schema_json: sites,
      example_json: !include sitepostexample.json 
    }
  }
  displayName: Sites
  
  /{siteID}:
    type: {
    member: { 
        schema_json: sites
      }
    }
 
/siteservices:
  type: {
    collection: { 
      schema_json: siteservices,
      example_json: !include siteservicepostexample.json 
    }
  }
  displayName: SiteServices
 
  /{siteserviceID}:
    type: {
    member: { 
        schema_json: siteservices
      }
    }
  



